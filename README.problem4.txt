COMPSCI 260 - Problem Set 1b, Problem 4
Due: Fri 26 Jan 2024, 5pm

Name: Cindy Su
NetID: cs699

Statement of collaboration and resources used (put None if you worked
entirely without collaboration or resources; otherwise cite carefully): None

My solutions and comments for this problem are below.
-----------------------------------------------------
a) At a high level, we assemble the source genome from reads by finding fragments who have matching sequences at the
beginning of one and end of the other, as the former can be affixed to the latter to form a larger fragment of the
genome. Some difficulties I initially think of are as following: we don't know how much overlap two consecutive sequences
will have, and certain fragments may overlap well with multiple fragments, so there might be trouble figuring out where
to put them. We can address the variable overlap by choosing the best match by the length of the match sequence. Also,
this will not be an issue in the code we develop because we are told that each read overlaps the start of another by
exactly 15 base pairs. If the degree of overlap decreases, it will be more likely that multiple fragments can
potentially match with each other. However, if we are only given a small number of fragments, this is less likely, and
we can still solve this by choosing the best match (most number of matching nucleotides). Also, knowing if there are a lot
of repeats in the genome will influence how the algorithm works; for example, eukaryotic genomes are made up mostly of
introns and have many repeating parts, whereas bacteria do not have introns, so we may not expect to run into repeats
that can cause errors in assembly as much. Also, knowing how many and how large the fragments are will influence the
development of the algorithm because if there are too many reads, it may take too many resources to compare each read
against every other to see if the front or end matches those of another, but this strategy may be feasible for a smaller
number of reads. Furthermore, if there were errors in the read, we would have to make our program recognize that overlap
sequences may not always be perfectly the same and match fragments even if there was an error in the middle of an
overlap.

b) When choosing the algorithm for this function, I decided to store the first and last 15 nucleotides of each read
along with the read number and location of the sequence, so I could directly find connecting sequences by looking up the
end sequence of a read, which is the key to two values: that read and the read the sequence is the start of. I chose
those as opposed to iterating through the sequences and matching them a different way because something like a nested
for loop would require many more iterations (O(n^2)) whereas this approach's runtime is linear with respect to the
number of reads.

The assembled plasmid sequence is agaaagaacagcagagtaccggaagtggctccagtagtacgtctgctggtaactcaatctcagcaaaagttagtgtatcgattgggggtaatgtgtcaaacgtagcttcagggtcgcgtggcacgctgtctagttctactgacctaatgcaaactgctacgcccctaaacagctctgaatctggaggcgcctccaactcgggagagggcagtgaacaagaggctatatacgaaaagcttagattgctcaacactcagcacgcagcggggcctgggcccctcgaaccagcacgtgccgcccccttagtaggacagtcgccaaatcaccttgggacacggtcatcgcacccccaattggtccatggcaatcatcaggcattgcaacagcatcagcaacagtcatggcctcctcgtcattactcaggctcgtggtaccctacgtccctttctgagatcccaatatcttcggcccctaatattgcaagcgttactgcttacgcctccgggccgtctcttgctcactcactgagccctcctaatgatatagagagccttgcttcgataggtcaccaaaggaattgtcctgtagctacagaggacatccacttgaagaaggagctcgacgggcaccaatcagatgaaaccgggtccggggagggcgaaaactcaaacggtggcgcctctaacattggtaatacggaagacgaccaagcccgactgattctcaaacgaaagctccaaaggaataggaccagtttcacaaacgaccaaatagactctctagagaaagagtttgaacgaactcactacccggacgtatttgctcgcgagcgattggccggcaagattgggttgccagaggcccgaattcaggtctggttttctaaccgacgggcgaaatggaggcgtgaagaaaaattgcgcaaccagcggaggactccgaactcaacaggcgcgtctgcaacatcctcgagtacctcggctacggcatcacttacagattcgccgaacagtttatccgcctgctcctcacttttaagcggttcagcgggtggtccctcagtgtctacgatcaatgggctgtcgtccccatctacgctttcgacaaatgtgaacgctcctaccctcggtgctggaatcgattcgagtgagagcccaacaccgataccgcacatacggccgtcatgcacaagtgataatgataatgggcgccaatccgaggattgtcgaagggtatgtagtccttgtcccctaggggttggaggccatcaaaatacacaccacatccaaagtaacggccacgcgcaggggcacgcgttggttccggcgatttcgcctcgcctgaactttaattcaggctccttcggcgcgatgtattcaaatatgcatcataccgctttatctatgtctgattcttacggcgccgtcaccccaatcccttcgtttaaccattcggccgtcggaccccttgcgccccctagcccgatcccgcagcagggagacttaacgccgtcatctctttacccatgccacatgactctccgaccgcctccgatggcccccgctcaccaccatatcgtgccgggcgacggaggccggccagccggtgtagggctgggctcggggcagtcggccaatcttggcgctagttgctcagggtcagggtacgaggtgctgtcagcatacgcgttgcctccccccccgatggcttcttcgtctgcggccgattctagtttctccgcagcaagttcagcttcggccaatgtaaccccacatcatacaattgctcaggagtcttgtccgtccccatgctctagcgcttcccactttggagttgcgcatagttctgggttttcctcagacccgatctcgcccgcggtgtcctcgtacgcccatatgagctataattacgcctcatcggccaacacaatgactccctcctctgcatcaggcacttccgctcacgtagctccagggaagcagcaattcttcgctagctgcttctattcaccctgggtctagggtggcctaactacggctacactagaaggacagtatttggtatctgcgctctgctgaagccagttaccttcggaaaaagagttggtagctcttgatccggcaaacaaaccaccgctggtagcggtggtttttttgtttgcaagcagcagattacgcgcagaaaaaaaggatctcaagaagatcctttgatcttttctacggggtctgacgctcagtggaacgaaaactcacgttaagggattttggtcatgagattatcaaaaaggatcttcacctagatccttttaaattaaaaatgaagttttaaatcaatctaaagtatatatgagtaaacttggtctgacagttaccaatgcttaatcagtgaggcacctatctcagcgatctgtctatttcgttcatccatagttgcctgactccccgtcgtgtagataactacgatacgggagggcttaccatctggccccagtgctgcaatgataccgcgagacccacgctcaccggctccagatttatcagcaataaaccagccagccggaagggccgagcgcagaagtggtcctgcaactttatccgcctccatccagtctattaattgttgccgggaagctagagtaagtagttcgccagttaatagtttgcgcaacgttgttgccattgctacaggcatcgtggtgtcacgctcgtcgtttggtatggcttcattcagctccggttcccaacgatcaaggcgagttacatgatcccccatgttgtgcaaaaaagcggttagctccttcggtcctccgatcgttgtcagaagtaagttggccgcagtgttatcactcatggttatggcagcactgcataattctcttactgtcatgccatccgtaagatgcttttctgtgactggtgagtactcaaccaagtcattctgagaatagtgtatgcggcgaccgagttgctcttgcccggcgtcaatacgggataataccgcgccacatagcagaactttaaaagtgctcatcattggaaaacgttcttcggggcgaaaactctcaaggatcttaccgctgttgagatccagttcgatgtaacccactcgtgcacccaactgatcttcagcatcttttactttcaccagcgtttctgggtgagcaaaaacaggaaggcaaaatgccgcaaaaaagggaataagggcgacacggaaatgttgaatactcatactcttcctttttcaatattattgaagcatttatcagggttattgtctcatgagcggatacatatttgaatgtatttagaaaaataaacaaataggggttccgcgcacatttccccgaaaagtgccacctgggtccttttcatcacgtgctataaaaataattataatttaaattttttaatataaatatataaattaaaaatagaaagtaaaaaaagaaattaaagaaaaaatagtttttgttttccgaagatgtaaaagactctagggggatcgccaacaaatactaccttttatcttgctcttcctgctctcaggtattaatgccgaattgtttcatcttgtctgtgtagaagaccacacacgaaaatcctgtgattttacattttacttatcgttaatcgaatgtatatctatttaatctgcttttcttgtctaataaatatatatgtaaagtacgctttttgttgaaattttttaaacctttgtttatttttttttcttcattccgtaactcttctaccttctttatttactttctaaaatccaaatacaaaacataaaaataaataaacacagagtaaattcccaaattattccatcattaaaagatacgaggcgcgtgtaagttacaggcaagcgatccgtcctaagaaaccattattatcatgacattaacctataaaaataggcgtatcacgaggccctttcgtctccgcgcccgtttcggtgatgacggtgaaaacctctgacacatgcagctcccggagacggtcacagcttgtctgtaagcggatgccgggagcagacaagcccgtcagggcgcgtcagcgggtgttggcgggtgtcggggctggcttaactatgcggcatcagagcagattgtactgagagtgcaccatatcgactacgtcgtaaggccgtttctgacagagtaaaattcttgagggaactttcaccattatgggaaatggttcaagaaggtattgacttaaactccatcaaatggtcaggtcattgagtgttttttatttgttgtatttttttttttttagagaaaatcctccaatatcaaattaggaatcgtagtttcatgattttctgttacacctaactttttgtgtggtgccctcctccttgtcaatattaatgttaaagtgcaattctttttccttatcacgttgagccattagtatcaatttgcttacctgtattcctttactatcctcctttttctccttcttgataaatgtatgtagattgcgtatatagtttcgtctaccctatgaacatattccattttgtaatttcgtgtcgtttctattatgaatttcatttataaagtttatgtacaaatatcataaaaaaagagaatctttttaagcaaggattttcttaacttcttcggcgacagcatcaccgacttcggtggtactgttggaaccacctaaatcaccagttctgatacctgcatccaaaacctttttaactgcatcttcaatggccttaccttcttcaggcaagttcaatgacaatttcaacatcattgcagcagacaagatagtggcgatagggtcaaccttattctttggcaaatctggagcagaaccgtggcatggttcgtacaaaccaaatgcggtgttcttgtctggcaaagaggccaaggacgcagatggcaacaaacccaaggaacctgggataacggaggcttcatcggagatgatatcaccaaacatgttgctggtgattataataccatttaggtgggttgggttcttaactaggatcatggcggcagaatcaatcaattgatgttgaaccttcaatgtagggaattcgttcttgatggtttcctccacagtttttctccataatcttgaagaggccaaaacattagctttatccaaggaccaaataggcaatggtggctcatgttgtagggccatgaaagcggccattcttgtgattctttgcacttctggaacggtgtattgttcactatcccaagcgacaccatcaccatcgtcttcctttctcttaccaaagtaaatacctcccactaattctctgacaacaacgaagtcagtacctttagcaaattgtggcttgattggagataagtctaaaagagagtcggatgcaaagttacatggtcttaagttggcgtacaattgaagttctttacggatttttagtaaaccttgttcaggtctaacactaccggtaccccatttaggaccacccacagcacctaacaaaacggcatcaaccttcttggaggcttccagcgcctcatctggaagtgggacacctgtagcatcgatagcagcaccaccaattaaatgattttcgaaatcgaacttgacattggaacgaacatcagaaatagctttaagaaccttaatggcttcggctgtgatttcttgaccaacgtggtcacctggcaaaacgacgatcttcttaggggcagacataggggcagacattagaatggtatatccttgaaatatatatatatattgctgaaatgtaaaaggtaagaaaagttagaaagtaagacgattgctaaccacctattggaaaaaacaataggtccttaaataatattgtcaacttcaagtattgtgatgcaagcatttagtcatgaacgcttctctattctatatgaaaagccggttccggcctctcacctttcctttttctcccaatttttcagttgaaaaaggtatatgcgtcaggcgacctctgaaattaacaaaaaatttccagtcatcgaatttgattctgtgcgatagcgcccctgtgtgttctcgttatgttgaggaaaaaaataatggttgctaagagattcgaactcttgcatcttacgatacctgagtattcccacagttaactgcggtcaagatatttcttgaatcaggcgccttagaccgctcggccaaacaaccaattacttgttgagaaatagagtataattatcctataaatataacgtttttgaacacacatgaacaaggaagtacaggacaattgattttgaagagaatgtggattttgatgtaattgttgggattccatttttaataaggcaataatattaggtatgtggatatactagaagttctcctcgaccgtcgatatgcggtgtgaaataccgcacagatgcgtaaggagaaaataccgcatcaggaaattgtaaacgttaatattttgttaaaattcgcgttaaatttttgttaaatcagctcattttttaaccaataggccgaaatcggcaaaatcccttataaatcaaaagaatagaccgagatagggttgagtgttgttccagtttggaacaagagtccactattaaagaacgtggactccaacgtcaaagggcgaaaaaccgtctatcagggcgatggcccactacgtgaaccatcaccctaatcaagttttttggggtcgaggtgccgtaaagcactaaatcggaaccctaaagggagcccccgatttagagcttgacggggaaagccggcgaacgtggcgagaaaggaagggaagaaagcgaaaggagcgggcgctagggcgctggcaagtgtagcggtcacgctgcgcgtaaccaccacacccgccgcgcttaatgcgccgctacagggcgcgtcgcgccattcgccattcaggctgcgcaactgttgggaagggcgatcggtgcgggcctcttcgctattacgccagctggcgaaagggggatgtgctgcaaggcgattaagttgggtaacgccagggttttcccagtcacgacgttgtaaaacgacggccagtgagcgcgcgtaatacgactcactatagggcgaattgggtaccgggccccccctcgaggtcgacggtatcgataagcttgatatcgaattcctgcagcccgggggatccactagttctagagcggccgccaccgcggtggagctccagcttttgttccctttagtgagggttaattgcgcgcttggcgtaatcatggtcatagctgtttcctgtgtgaaattgttatccgctcacaattccacacaacataggagccggaagcataaagtgtaaagcctggggtgcctaatgagtgaggtaactcacattaattgcgttgcgctcactgcccgctttccagtcgggaaacctgtcgtgccagctgcattaatgaatcggccaacgcgcggggagaggcggtttgcgtattgggcgctcttccgcttcctcgctcactgactcgctgcgctcggtcgttcggctgcggcgagcggtatcagctcactcaaaggcggtaatacggttatccacagaatcaggggataacgcaggaaagaacatgtgagcaaaaggccagcaaaaggccaggaaccgtaaaaaggccgcgttgctggcgtttttccataggctccgcccccctgacgagcatcacaaaaatcgacgctcaagtcagaggtggcgaaacccgacaggactataaagataccaggcgtttccccctggaagctccctcgtgcgctctcctgttccgaccctgccgcttaccggatacctgtccgcctttctcccttcgggaagcgtggcgctttctcatagctcacgctgtaggtatctcagttcggtgtaggtcgttcgctccaagctgggctgtgtgcacgaaccccccgttcagcccgaccgctgcgccttatccggtaactatcgtcttgagtccaacccggtaagacacgacttatcgccactggcagcagccactggtaacaggattagcagagcgaggtatgtaggcggtgctacagagttcttgaagtatgttcacgctacagccgacgcctactgcgatcggaacagttgtacctccgtggagtgctggcacactgatagaacgcctacccagtcttgaagacatggctcataagggtcatagcggtgtcaatcagctgggaggcgtttttgtcgggggcaggccattgccagactcaacacgtcaaaagatcgtggaactcgcccattcgggggctcggccttgtgatatttctcggattcttcaagttagcaacggatgtgtatctaagattttggggcgctactacgaaactggctccatacgcccccgcgccataggcggcagcaaaccacgcgttgcaactgctgaagtcgtatccaaaatatcacagtataagagagaatgtccttcgatatttgcgtgggagatacgggatcggctcctccaggagaatgtttgcactaatgataatatcccctcggtctcatcgattaacagagttcttcggaacttggcagctc

c) The assembled plasmid is 8541 nucleotides long. The first 15 nucleotides using the start read are agaaagaacagcaga
and the last 15 are ggaacttggcagctc.

d) We were told that the average length of the reads is approximately 625 base pairs and there are exactly 15 base pairs
of overlap. When we assemble two reads, we do not double count the overlapping sequence. Since the plasmid is circular,
every read has two overlapping parts in contrast to a linear genome where the first and last reads would have only
one overlap. We would calculate the expected length to be 14(625)-14(15) = 8540, which is almost the exact same length
as our assembled plasmid sequence (difference probably due to rounding in average read length).

e) To solve the challenge of a double-stranded nucleotide sequence, we would use the reverse complement function from
the compsci 260 library and pass that sequence into find_orfs to make sure we get all the ORFs from both strands. As for
the circularity, my find_orfs function stored all the locations of all start and stop codons and then determined the
longest possible ORF to store. Assuming a circular genome, the only thing that could be different is if there is an ORF
that starts near the end of the sequence and ends at the beginning. This could manifest in two ways: either this ORF
would replace one that shares this stop codon but has a start codon near the beginning of the sequence, making it
shorter, or it if there is no start codon near the beginning of the sequence that shares this stop codon, it would
just add another ORF to the list. We also need to consider the length of the nucleotide sequence in the circularity: if
it is a multiple of 3, the stop codon of concern would just be the first stop codon we had stored earlier, but if it is
not, we have to consider the frame shift since although the sequence is circular, our code treats it as linear, so we
may need to consider two "reading frames" when wrapping back around for a single call of find_orfs_in_single_frame. In
terms of total reading frames, we need to consider three reading frames for each strand (W and C) because the entire
sequence is most likely not palindromic, so to find all the ORFs in the circular, double-stranded genome, we would need
 to look at 6 separate reading frames.

In my current function, I first find all the stop codons in the sequence then filter out the ones that are in the
correct reading frame, but since we need to consider multiple reading frames at once, I would change my function to keep
all the stop codons in the dict and just add the frame number to the value and check if it is in the correct frame when
I iterate through the stops dict to find the stop codon for a given ORF. Currently, I have a break if there is a start
codon near the end of the sequence without a corresponding stop codon, but I would just add code to this chunk to adapt
it for circularity. Specifically, I would iterate through the stops dict and find the first stop codon that would be in
frame by adding the sequence length to the initial location of the codon. Then, if necessary, I would remove a shorter
ORF from the final ORF list if the stop  codon was shared with another start codon. ORFs can overlap each other, for
example if the stop codon in question is in  a different frame than that of the first ORF found (e.g.
ATGCTAATGTAAAATGAG). One ORF is nucleotides 1-12 and another is 14-7 (wraps around).


